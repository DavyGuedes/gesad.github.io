@Article{PP_MPS12,
    author = {Mateescu, Radu and Poizat, Pascal and Sala√ºn, Gwen},
    year = {2012},
    title = {{Adaptation of Service Protocols using Process Algebra and On-the-Fly Reduction Techniques}},
    journal = {IEEE Transactions on Software Engineering},
    pages = {755--777},
    volume = {38},
    number = {4},
    DOI = {10.1109/TSE.2011.62},
    HAL_ID = {hal-00717252},
    PDF = {https://hal.inria.fr/hal-00717252/document},
}


@inproceedings{Oliveira10multidimensional,
pdf = {mucocos10.pdf},
author = {de Oliveira Castro, Pablo and Louise, St\'ephane and Barthou, Denis},
title ={{A Multidimensional Array Slicing DSL for Stream Programming}},
booktitle ={Complex, Intelligent and Software Intensive Systems, International Conference},
year = {2010},
pages = {913-918},
doi = {http://doi.ieeecomputersociety.org/10.1109/CISIS.2010.135},
publisher = {IEEE Computer Society},
abstract = {{
Stream languages offer a simple multi-core programming model and achieve good performance. Yet expressing data rearrangement patterns (like a matrix block decomposition) in these languages is verbose and error prone. In this paper, we propose a high-level programming language to elegantly describe n-dimensional data reorganization patterns. We show how to compile it to stream languages.
}},
}



@inproceedings{Oliveira10Reducing,
  pdf={streammemory-hpcs10.pdf},
  title={{Reducing memory requirements of stream programs by graph transformations}},
  author={de Oliveira Castro, Pablo and Louise, St\'ephane and Barthou, Denis},
  booktitle={High Performance Computing and Simulation (HPCS), 2010 International Conference on},
  pages={171--180},
  year={2010},
  publisher = {IEEE Computer Society},
  doi = {http://doi.ieeecomputersociety.org/10.1109/HPCS.2010.5547134},
  abstract = {{
  Stream languages explicitly describe fork-join parallelism and pipelines, offering a powerful programming model for many-core Multi-Processor Systems on Chip (MPSoC). In an embedded resource-constrained system, adapting stream programs to fit memory requirements is particularly important. In this paper we present a new approach to reduce the memory footprint required to run stream programs on MPSoC. Through an exploration of equivalent program variants, the method selects parallel code minimizing memory consumption. For large program instances, a heuristic accelerating the exploration phase is proposed and evaluated. We demonstrate the interest of our method on a panel of ten significant benchmarks. Using a multi-core modulo scheduling technique, our approach lowers considerably the minimal amount of memory required to run seven of these benchmarks while preserving throughput.
  }},
}


@PHDTHESIS{Oliveira:phd,
  pdf = {these-oliveira.pdf},
  title = {{Expression et optimisation des r\'eorganisations de donn\'ees dans du
  parall\'elisme de flots}},
  author = {de Oliveira Castro, Pablo},
  year = {2010},
  school = {Universit\'e de Versailles Saint Quentin en Yvelines},
}

@mastersthesis{mastersthesis,
  author       = {Peter Harwood},
  title        = {The title of the work},
  school       = {The school of the thesis},
  year         = 1993,
  address      = {The address of the publisher},
  month        = 7,
  note         = {An optional note}
}

@phdthesis{phdthesis,
  author       = {Peter Joslin},
  title        = {The title of the work},
  school       = {The school of the thesis},
  year         = 1993,
  address      = {The address of the publisher},
  month        = 7,
  note         = {An optional note}
}

@inproceedings{singaravelu:06:eurosys,
  author =       {Singaravelu, Lenin and Pu, Calton and H{\"a}rtig, Hermann and Helmuth, Christian},
  title =        {Reducing TCB complexity for security-sensitive applications: three case studies},
  crossref =     {eurosys:06},
  pages =        {161--174},
  doi =          {10.1145/1217935.1217951},
  keywords =     {application security, trusted computing base},
}

@inproceedings{padioleau:06:eurosys,
  author =       {Yoann Padioleau and Julia L. Lawall and Gilles Muller},
  title =        {Understanding Collateral Evolution in {Linux} Device Drivers},
  crossref =     {eurosys:06},
  pages =        {59--71},
  doi =          {10.1145/1218063.1217942},
  keywords =     {Coccinelle},
}
